@implements IAsyncDisposable
@using System.Linq.Expressions

@inject IJSRuntime JS

<div class="map-element" @ref="_mapElement" @attributes="Attributes"></div>

Latitude: <em>@Value.Latitude</em>;
Longitude: <em>@Value.Longitude</em>

@code {
    private bool _hasInitializedParameters;
    private ElementReference _mapElement;
    private IJSObjectReference? _mapModule;
    private IJSObjectReference? _mapInstance;
    private DotNetObjectReference<MapEditor>? _objRef;


    [CascadingParameter] public EditContext? CascadedEditContext { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; }

    [Parameter] public Coordinate Value { get; set; } = Coordinate.Empty;
    [Parameter] public EventCallback<Coordinate> ValueChanged { get; set; }
    [Parameter] public Expression<Func<Coordinate>>? ValueExpression { get; set; }

    protected EditContext EditContext { get; set; } = default!;
    protected internal FieldIdentifier FieldIdentifier { get; set; }


    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        if (!_hasInitializedParameters)
        {
            // This is the first run
            //
            if (ValueExpression == null)
            {
                throw new InvalidOperationException($"{GetType()} requires a value for the 'ValueExpression' " +
                    $"parameter. Normally this is provided automatically when using 'bind-Value'.");
            }

            FieldIdentifier = FieldIdentifier.Create(ValueExpression);

            if (CascadedEditContext != null)
            {
                EditContext = CascadedEditContext;
            }

            _hasInitializedParameters = true;
        }
        else if (CascadedEditContext != EditContext)
        {
            // Not the first run

            // We don't support changing EditContext because it's messy to be clearing up state and event
            // handlers for the previous one, and there's no strong use case. If a strong use case
            // emerges, we can consider changing this.
            throw new InvalidOperationException($"{GetType()} does not support changing the " +
                $"{nameof(Microsoft.AspNetCore.Components.Forms.EditContext)} dynamically.");
        }

        // For derived components, retain the usual lifecycle with OnInit/OnParametersSet/etc.
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            _mapModule = await JS.ImportModuleAsync("./Components/Maps/MapEditor.razor.js");
            _mapInstance = await _mapModule.InvokeAsync<IJSObjectReference>("initMap", _mapElement, _objRef);
        }

        // Update map marker
        //
        if (_mapModule is not null)
        {
            if (Value == Coordinate.Empty)
                await _mapModule.InvokeVoidAsync("clearMarker", _mapInstance);
            else
                await _mapModule.InvokeVoidAsync("setMarker", _mapInstance, Value);
        }
    }

    [JSInvokable]
    public async Task SetMarker(double lat, double lon)
    {
        Value = new Coordinate(lat, lon);
        await ValueChanged.InvokeAsync(Value);

        StateHasChanged();
        NotifyChanged();
    }

    private void NotifyChanged()
    {
        if(EditContext is not null)
            EditContext?.NotifyFieldChanged(FieldIdentifier);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_mapInstance is not null)
            await _mapInstance.DisposeAsync();

        if (_mapModule is not null)
            await _mapModule.DisposeAsync();

        _objRef?.Dispose();
    }
}
