@implements IAsyncDisposable
@using System.Linq.Expressions

@inject IJSRuntime JS
@inject IMessageBoxService MessageBoxService

<div class="map-element" @ref="_mapElement" @attributes="Attributes"></div>

<div @ref="_markerInfoElement" style="display: none;">
    @if (SelectedItem != null)
    {
        <h2>@SelectedItem.Title</h2>
        <p>
            Data di inizio lavori:
            <strong>@SelectedItem.StartDate.ToString("dd MMMM yyyy")</strong>
        </p>
        @if (!string.IsNullOrWhiteSpace(SelectedItem.FileName))
        {
            <img src="/api/v1/BuildingSites/image/@SelectedItem.Id" alt="@SelectedItem.FileName" style="width: 100%;" />
        }
        else
        {
            <div class="text-center">
                <img src="/images/umarell_logo.png" alt="umarell logo" width="50" />
                <h5>Immagine non caricata</h5>
            </div>
        }
        <div class="mt-3">
            <button type="button" class="btn btn-secondary" name="edit">Edit</button>
            <button type="button" class="btn btn-danger" name="delete">Delete</button>
        </div>
    }
    else
    {
        <span>Cantiere non valido</span>
    }
</div>

<div @ref="_markerNoInfoElement" style="display: none;">
    <div class="text-center">
        <img src="/images/umarell_logo.png" alt="umarell logo" width="50" />
        <p>Ops, qualcosa è andato storto...</p>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; }
    [Parameter] public IEnumerable<BuildingSiteModel>? Items { get; set; }

    private BuildingSiteModel? SelectedItem { get; set; }

    private ElementReference _mapElement;
    private ElementReference _markerInfoElement;
    private ElementReference _markerNoInfoElement;
    private IJSObjectReference? _mapModule;
    private IJSObjectReference? _mapInstance;
    private DotNetObjectReference<MapDisplay>? _objRef;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            _mapModule = await JS.InvokeAsync<IJSObjectReference>("import", $"./Shared/MapDisplay.razor.js?v={Utilities.GetVersion()}");
            _mapInstance = await _mapModule.InvokeAsync<IJSObjectReference>("initMap", _mapElement, Items, _objRef);
        }
    }

    [JSInvokable]
    public Task<ElementReference> SetMarkerInfo(Guid buildingSiteId)
    {
        ElementReference result = _markerNoInfoElement;

        SelectedItem = Items?.FirstOrDefault(x => x.Id == buildingSiteId);
        if (SelectedItem != null)
            result = _markerInfoElement;

        StateHasChanged();
        return Task.FromResult(result);
    }

    [JSInvokable]
    public async Task MarkerInfoButtonClick(Guid buildingSiteId, string action)
    {
        if (action == "delete")
        {
            var canDelete =  await MessageBoxService.ShowConfirmAsync("Delete", $"Sicuro di voler cancellare?");
            await MessageBoxService.ShowAlertAsync("Delete", $"Hai risposto: '{canDelete}'.");
        }
        else
        {
            await MessageBoxService.ShowAlertAsync("ButtonClick", $"Hai premuto '{action}' su '{buildingSiteId}'");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_mapInstance is not null)
            await _mapInstance.DisposeAsync();

        if (_mapModule is not null)
            await _mapModule.DisposeAsync();

        _objRef?.Dispose();
    }
}
