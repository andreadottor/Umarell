@page "/Insert"

@attribute [Authorize]

@inject IJSRuntime JS
@inject ApiProxyService ApiProxy
@inject IMessageBoxService MessageBoxService

<Page Title="Inserimento nuovo cantiere">

    <EditForm EditContext="editContext" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <div class="form-group mt-3">
            <label for="txtTitle">Titolo</label>
            <InputTextOnInput @bind-Value="Title" class="form-control" id="txtTitle" />
            <ValidationMessage For="() => Title" />
        </div>

        <div class="form-group mt-3">
            <label for="startDate">Data inizio</label>
            <InputDate @bind-Value="@StartDate" class="form-control" id="startDate" />
            <ValidationMessage For="() => StartDate" />
        </div>

        <div class="form-group mt-3">
            <label for="fileImage">Foto</label>
            <InputFile OnChange="@LoadFiles" class="form-control" id="fileImage" />
        </div>

        <div class="form-group mt-3">
            <label for="map">Posizione</label>
            <MapEditor @bind-Value="Position" Field="() => Position" id="map" />
            <ValidationMessage For="() => Position" />
        </div>
        <hr />
        <FormSubmitButton>Salva</FormSubmitButton>
    </EditForm>
</Page>


@code {

    [Required(ErrorMessage = "Il campo 'Titolo' è obbligaorio")]
    [StringLength(250)]
    public string Title { get; set; } = string.Empty;
    [Required(ErrorMessage = "Il campo 'Data inizio' è obbligatorio")]
    public DateTime? StartDate { get; set; }
    private IBrowserFile? Image { get; set; }
    public Coordinate Position { get; set; } = Coordinate.Empty;

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext = new(this);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (Position == Coordinate.Empty)
            messageStore?.Add(() => Position, "Il campo 'Posizione' è obbligatorio");
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        Image = e.File;
    }

    private async Task Save()
    {
        var model = new BuildingSiteInsertModel();
        model.Title = Title;
        model.Latitude = Position.Latitude;
        model.Longitude = Position.Longitude;
        model.StartDate = StartDate.Value;

        if (Image != null)
        {
            try
            {
                using Stream stream = Image.OpenReadStream(1024000 * 3);
                using MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);

                model.FileName = Image.Name;
                model.FileContent = ms.ToArray();
            }
            catch (IOException ex)
            {
                await MessageBoxService.ShowAlertAsync("Error", ex.Message);
                return;
            }
        }
        var result = await ApiProxy.InsertBuildingSiteAsync(model);

        if (result)
        {
            await MessageBoxService.ShowAlertAsync("OK", "Inserimento nuovo cantiere avvenuto con successo");
            Clear();
        }
        else
        {
            await MessageBoxService.ShowAlertAsync("Error", "Errore durante l'inserimento del cantiere.");
        }
    }

    private void Clear()
    {
        Image = null;
        Title = string.Empty;
        Position = Coordinate.Empty;
        StartDate = null;
    }

}
