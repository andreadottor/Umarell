@implements IDisposable

<button type="submit"
        class="btn btn-primary"
        @attributes="Attributes"
        disabled="@(!EditContext.IsModified())">
    @ChildContent
</button>

@code {
    private bool _hasInitializedParameters;

    [CascadingParameter] private EditContext? CascadedEditContext { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected EditContext EditContext { get; set; } = default!;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        if (!_hasInitializedParameters)
        {
            if (CascadedEditContext != null)
            {
                EditContext = CascadedEditContext;
                EditContext.OnFieldChanged += FieldChanged;
            }

            _hasInitializedParameters = true;
        }
        else if (CascadedEditContext != EditContext)
        {
            // Not the first run

            // We don't support changing EditContext because it's messy to be clearing up state and event
            // handlers for the previous one, and there's no strong use case. If a strong use case
            // emerges, we can consider changing this.
            throw new InvalidOperationException($"{GetType()} does not support changing the " +
                $"{nameof(Microsoft.AspNetCore.Components.Forms.EditContext)} dynamically.");
        }

        // For derived components, retain the usual lifecycle with OnInit/OnParametersSet/etc.
        return base.SetParametersAsync(ParameterView.Empty);
    }

    private void FieldChanged(object sender, FieldChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        if(EditContext is not null)
            EditContext.OnFieldChanged -= FieldChanged;
    }
}
