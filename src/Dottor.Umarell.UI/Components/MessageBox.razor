@implements IAsyncDisposable

@inject IMessageBoxService MessageBoxService
@inject IJSRuntime JS

<div @ref="_modalElement" class="modal fade" data-bs-backdrop="true" tabindex="-1" aria-labelledby="messagebox" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
            </div>
            <div class="modal-body">
                @Text
            </div>
            <div class="modal-footer">
                @if (MessageBoxType == MessageBoxType.Alert)
                {
                    <button type="button" class="btn btn-primary" @onclick="() => Callback(true)">
                        Ok
                    </button>
                }
                else if (MessageBoxType == MessageBoxType.Confirm)
                {
                    <button type="button" class="btn btn-primary" @onclick="() => Callback(true)">
                        Ok
                    </button>

                    <button type="button" class="btn btn-secondary" @onclick="() => Callback(false)">
                        Cancel
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference _modalElement;
    private IJSUnmarshalledObjectReference? _module;
    private IJSObjectReference? _modalInstance;

    private string Title { get; set; } = "";
    private string Text { get; set; } = "";
    private MessageBoxType MessageBoxType { get; set; } = MessageBoxType.Alert;
    private Func<bool, Task>? ReturnCallback { get; set; }

    protected override void OnInitialized()
    {
        MessageBoxService.MessageBoxShow +=
            (sender, e) =>
            {
                Title = e.Title;
                Text = e.Text;
                MessageBoxType = e.MessageBoxType;
                ReturnCallback = e.ReturnCallback;
                StateHasChanged();
                _module?.InvokeVoid("show", _modalInstance);
            };
    }

    private void Callback(bool result)
    {
        if (ReturnCallback != null)
            ReturnCallback.Invoke(result);
        _module?.InvokeVoid("hide", _modalInstance);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSUnmarshalledObjectReference>("import", "./_content/Dottor.Umarell.UI/Components/MessageBox.razor.js");
            _modalInstance = await _module.InvokeAsync<IJSObjectReference>("init", _modalElement);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_modalInstance is not null)
            await _modalInstance.DisposeAsync();

        if (_module is not null)
            await _module.DisposeAsync();
    }

}